/*
	defines.h

	MIT License

	Copyright (c) 2022 Marcelo H Moraes

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in all
	copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	SOFTWARE.

	Description:
		Are two channels of PWM control output, each one controlled by a potentiometer
		Are three modes:
			mode 0: The MCU is in power down and outputs is turn off
  			mode 1: Only OUT0 is driven, the OUT1 is turn off
  			mode 2: Only OUT1 is driven, the OUT0 is turn off
  			mode 3(default): Both outputs is driven
  	
  	Identity of system:
  		OUT1: PWM out 0 at PB0 pin
  		OUT2: PWM out 1 at PB1 pin
  		POT1: ADC channel 2 control PWM out at PB4 pin
  		POT2: ADC channel 3 control PWM out at PB3 pin
  		BTN0: INT0 interrupt to wakeup MCU and change modes
  		
  	Peripheral:
  		The clock MCU is running at 1MHz
  		The Brown-down detect programed at 4.5V
  		The PWM is generated by Timer 0 at frequency predefined and calculate by move average with number max of samples defined in NUMBER_OF_SAMPLES
  		Timer 1 generate the times to read the analog inputs with ADC each 16ms and debounce the button at 114ms
  		The ADC read two analog inputs, the ADC complete ISR change between the two channels, each channel have frequency 30 samples/s 
  		The button is read at falling edge by external interrupt INT0, a debounce time of 114ms verify if button is liberated.
  		INT0 wakeup CPU from power down and change PWM mode
        	Sleep Power Down is active in mode 0
  		Sleep IDLE is active in the end of each ADC read, sample process and control read, until the next ADC read time
  
*/
#ifndef DEFINES_H_
#define DEFINES_H_

#include "avr/io.h"
#include "avr/eeprom.h"
#include "avr/interrupt.h"
#include "avr/sleep.h"
#include "avr/wdt.h"
#include "util/delay.h"
#include "inttypes.h"

/****                    Pins configuration                   ****/

#define _OUT0 PB0
#define _OUT1 PB1

#define _OUT1_PWM OCR0A
#define _OUT2_PWM OCR0B

#define _BT	PB2

#define _ADC_CH0	2
#define _ADC_CH1	3

/****                    Filter configuration                    ****/

/*	Number of samples in moving average
	More samples means steady and smooth captures, but slower the changes*/
#define NUMBER_OF_SAMPLES		10

/****                    PWM configuration                    ****/

/*
	Fclk = 1MHz
	
	PWM Correct Phase mode:
		Fpwm = Fclk / N / 510
		
	PWM Fast mode:
		Fpwm = Fclk / N / 256
	
	Above 300Hz is good for the eyes, but to camera captures needs above 1KHz
	Controlled led must match frequency, using more speed may result in loss of control resolution
	
	Select one mode and prescaler below
	
	Default mode:
		Fpwm = 1E6 / 1 / 510 = 1960 Hz
	
*/

#define PWM_MODE	(_bv(WGM00))				/*Phase Correct PWM*/
//#define PWM_MODE	(_bv(WGM01)|_bv(WGM00))		/*Fast PWM*/

#define PWM_PRESCALE (_bv(CS00))				/*Fclk/1, N = 1*/
//#define PWM_PRESCALE (_bv(CS01))				/*Fclk/8, N = 8 */
//#define PWM_PRESCALE (_bv(CS01)|_bv(CS00))	/*Fclk/64, N = 64*/
//#define PWM_PRESCALE (_bv(CS02))				/*Fclk/256, N = 256*/
//#define PWM_PRESCALE (_bv(CS02)|_bv(CS00))	/*Fclk/1024, N = 1024*/

/****                    Utils Macros                    ****/

#define _bv(_bit)	(1<<_bit)

#define _out(_pin)		{PORTB&=~_bv(_pin); DDRB|=_bv(_pin);}
#define _pullup(_pin)	{DDRB&=~_bv(_pin); PORTB|=_bv(_pin);}

#define _off(_pin)	(PORTB&=~_bv(_pin))
#define _on(_pin)	(PORTB|=_bv(_pin))

#define _read(_pin)	(PINB&_bv(_pin))

#define system_init() {sei();}

#endif /* DEFINES_H_ */
